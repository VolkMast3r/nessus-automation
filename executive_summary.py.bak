import csv
import json
import matplotlib.pyplot as plt
from docxtpl import DocxTemplate
from Analyze_csv import Analyze_Risks, Analyze_solution, Analyze_Hosts, Analyze_synopsis
from docx import Document, styles
from docx.shared import Inches
import httpx

# load csv file from csvs directory

def load_csv(csv_file):
    with open(csv_file, 'r') as f:
        # Read the file
        reader = csv.DictReader(f)
        # Create a list of dicts
        data = list(reader)
        # drop Risk = None
        data = [row for row in data if row['Risk'] != 'None']
        return data

data = load_csv('repos/csvs/Momentum_Credit_Internal_egy66a.csv')

def vuln_summary(data):
    # instance of the class
    analyze_risks = Analyze_Risks(data)
    print(analyze_risks.risk)
    # plot the risks as percentages
    # define the colors High = red, Medium = yellow, Low = green, critical = purple
    colors = ['red', 'Orange', 'green', 'purple']
    # define the labels
    labels = ['High', 'Medium', 'Low', 'Critical']
    # define the values
    values = [analyze_risks.risk['High'], analyze_risks.risk['Medium'],
            analyze_risks.risk['Low'], analyze_risks.risk['Critical']]
    # plot the pie chart
    plt.pie(values, labels=labels, colors=colors, autopct='%1.1f%%')
    plt.title('Risk Distribution')
    # legend
    plt.legend(labels, loc='best')
    # save the plot
    plt.savefig('Risk_Distribution.png')
    doc = DocxTemplate("word_reports/activity_log.docx")
    context = {'hosts': analyze_risks.risk}
    doc.render(context)
    doc.save("word_reports/output.docx")
    # insert the pie chart into the word document
    document = Document('output.docx')
    document.add_picture('Risk_Distribution.png', width=Inches(6))
    document.save('word_reports/output.docx')
    # insert analyze_risks.risk into the word document
    document = Document('output.docx')
    document.add_paragraph(str(f'High Severity issues account for {analyze_risks.risk["High"]} of the total issues, \
    Medium Severity issues account for {analyze_risks.risk["Medium"]} of the total issues, \
    Low Severity issues account for {analyze_risks.risk["Low"]} of the total issues, \
    Critical Severity issues account for {analyze_risks.risk["Critical"]} of the total issues.'))
    # Highest Risk
    document.add_paragraph(str(f'The highest risk is {max(analyze_risks.risk, key=analyze_risks.risk.get)} with {analyze_risks.risk[max(analyze_risks.risk, key=analyze_risks.risk.get)]} issues.'))
    # save the document
    document.save('word_reports/output.docx')

def top_recommendations(data):
    # instance of the class
    analyze_solution = Analyze_solution(data)
    # insert analyze_solution.solution into the word document as a table
    document = Document('word_reports/output.docx')
    table = document.add_table(rows=1, cols=2)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Recommendation'
    hdr_cells[1].text = 'Count'
    for key in analyze_solution.solution:
        row_cells = table.add_row().cells
        row_cells[0].text = key
        row_cells[1].text = str(analyze_solution.solution[key])
    document.save('word_reports/output.docx')

def top_hosts(data):
    # instance of the class
    analyze_hosts = Analyze_Hosts(data)
    host_count_dict = analyze_hosts.host_count()
    # sort the dictionary by value
    host_count_dict = dict(sorted(host_count_dict.items(), key=lambda item: item[1], reverse=True))
    print(host_count_dict)
    # Host with the most issues
    document = Document('word_reports/output.docx')
    document.add_paragraph(str(f'The host with the most issues is {max(host_count_dict, key=host_count_dict.get)} with {host_count_dict[max(host_count_dict, key=host_count_dict.get)]} issues.\
    it accounts for {round(host_count_dict[max(host_count_dict, key=host_count_dict.get)]/sum(host_count_dict.values())*100, 2)}% of the total issues.'))
    # save the document
    document.save('word_reports/output.docx')

def top_five_synopsis(data):
    # instance of the class
    analyze_synopsis = Analyze_synopsis(data)
    # get the top five synopsis
    print(analyze_synopsis.top5_synopsis_severity_solution())
    # insert analyze_synopsis.top5_synopsis into the word document as a table
    document = Document('word_reports/output.docx')
    # paragraph
    document.add_paragraph('The top 5 overall vulnerabilities are:')
    table = document.add_table(rows=1, cols=2)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Synopsis'
    hdr_cells[1].text = 'Count'
    for key in analyze_synopsis.top5_synopsis:
        row_cells = table.add_row().cells
        row_cells[0].text = key
        row_cells[1].text = str(analyze_synopsis.top5_synopsis[key])
    document.save('word_reports/output.docx')

# vuln_summary()
# top_recommendations()
# top_hosts()
top_five_synopsis(data)




